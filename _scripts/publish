#!/bin/bash
helpf() {
  cat <<HELP

  USAGE: ${0##*/} [options]

  Perform some checks, create a build and ssh it over to put put it into
  production.

  OPTIONS:
    -h:  output help
    -d:  publish even if there are uncommitted changes in the working tree.
    -f:  skip the tests and force the publishing. Useful when intending to
         publish any branch other than master - which should only be done with
         care.

  NOTES:

    Yes, it would be nicer if this worked as:

    A)  a push to production, with a post hook that would build it and place the
        artifacts into production requiring only a
          $ git push production
        to release the latest version.

    B)  a web hook triggering a pull and build from the web server, which would
        place the artifacts into production.

    Both would require the ability to build on the web server, however, which I
    did not succeed at as of yet. Solution A would also require a running git
    server, while B would need a web hook poller.
HELP
exit $1
}

ALLOWDIRTY=false
FORCE=false
USER=essentials
SERVER=applications.xebia.com
BUILD_DIR="_site"
PRODUCTION_DIR='static'

while getopts "hdf" o; do
  case "${o}" in
    d) ALLOWDIRTY=true ;;
    f) FORCE=true ;;
    h) helpf ;;
    *) helpf 1 ;;
  esac
done

# exit if anything fails
set -e
set -o pipefail

if [ $ALLOWDIRTY = false ]; then
  if ! (git diff --quiet && git diff --cached --quiet) then
    echo 'ABORTING: There are uncommitted changes in the working tree or index.'
    echo '          Commit or stash your changes, or run with -d to ignore.'
    exit 1;
  fi
fi

if [ $FORCE = false ]; then
  # Ensure we're in complete synch with origin/master, as production should
  # always mirror the upstream repository
  git fetch origin master >/dev/null 2>&1
  if [[ $(git rev-parse HEAD) != $(git rev-parse origin/master) ]]; then
    echo 'ABORTING: Not currently on origin/master.'
    echo '          Run with -f to force publish an alternate branch or -h for help.'
    exit 1
  fi
fi

# Not sure if Jekyll cleans up old builds. Rm and rebuild
rm -rf "${BUILD_DIR}"
jekyll build

# ssh it into production, gzipping the stream and unpacking on arrival
# be sure to have set up pubkey authentication
tar zcf - "${BUILD_DIR}" | ssh ${USER}@${SERVER} "tar zxf - --touch -C ~/ && rm -r ${PRODUCTION_DIR} && mv ~/${BUILD_DIR} ${PRODUCTION_DIR}"
